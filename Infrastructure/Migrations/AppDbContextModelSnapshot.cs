// <auto-generated />
using System;
using Infrastructure.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.CoreEntities.Constructor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("CurrentPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Constructors");
                });

            modelBuilder.Entity("Domain.Entities.CoreEntities.Driver", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("CurrentPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int>("DriverNumber")
                        .HasColumnType("int");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("Domain.Entities.CoreEntities.FantasyTeam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Budget")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("SeasonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TeamLogoUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TeamName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TotalPoints")
                        .HasColumnType("int");

                    b.Property<int>("TransfersRemaining")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId");

                    b.HasIndex("UserId");

                    b.ToTable("FantasyTeams");
                });

            modelBuilder.Entity("Domain.Entities.CoreEntities.League", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InviteCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit");

                    b.Property<int>("MaxMembers")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SeasonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OwnerId");

                    b.HasIndex("SeasonId");

                    b.ToTable("Leagues");
                });

            modelBuilder.Entity("Domain.Entities.CoreEntities.Race", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Circuit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Practice1Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Practice2Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("Practice3Date")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("QualifyingDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("RaceDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Round")
                        .HasColumnType("int");

                    b.Property<Guid>("SeasonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId");

                    b.ToTable("Races");
                });

            modelBuilder.Entity("Domain.Entities.CoreEntities.Season", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("Domain.Entities.CoreEntities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsEmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Entities.RelationshipEntities.SeasonConstructor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConstructorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("CurrentPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<Guid>("SeasonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("StartingPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("TotalPoints")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConstructorId");

                    b.HasIndex("SeasonId");

                    b.ToTable("SeasonConstructors");
                });

            modelBuilder.Entity("Domain.Entities.RelationshipEntities.SeasonDriver", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ConstructorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("CurrentPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SeasonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("StartingPrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("TotalPoints")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ConstructorId");

                    b.HasIndex("DriverId");

                    b.HasIndex("SeasonId");

                    b.ToTable("SeasonDrivers");
                });

            modelBuilder.Entity("Domain.Entities.RelationshipEntities.TeamConstructor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ConstructorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FantasyTeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("PurchasePrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ConstructorId");

                    b.HasIndex("FantasyTeamId");

                    b.ToTable("TeamConstructors");
                });

            modelBuilder.Entity("Domain.Entities.RelationshipEntities.TeamDriver", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("FantasyTeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsCaptain")
                        .HasColumnType("bit");

                    b.Property<decimal>("PurchasePrice")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime?>("RemovedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("FantasyTeamId");

                    b.ToTable("TeamDrivers");
                });

            modelBuilder.Entity("Domain.Entities.RelationshipEntities.UserLeague", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("LeagueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LeftAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LeagueId");

                    b.HasIndex("UserId");

                    b.ToTable("UserLeagues");
                });

            modelBuilder.Entity("Domain.Entities.ResultEntities.ConstructorResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConstructorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FantasyPoints")
                        .HasColumnType("int");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<Guid>("RaceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ConstructorId");

                    b.HasIndex("RaceId");

                    b.ToTable("ConstructorResults");
                });

            modelBuilder.Entity("Domain.Entities.ResultEntities.GameweekConstructor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ConstructorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GameweekTeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("ConstructorId");

                    b.HasIndex("GameweekTeamId");

                    b.ToTable("GameweekConstructors");
                });

            modelBuilder.Entity("Domain.Entities.ResultEntities.GameweekDriver", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GameweekTeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsCaptain")
                        .HasColumnType("bit");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasPrecision(10, 2)
                        .HasColumnType("decimal(10,2)");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("GameweekTeamId");

                    b.ToTable("GameweekDrivers");
                });

            modelBuilder.Entity("Domain.Entities.ResultEntities.GameweekTeam", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("FantasyTeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<Guid>("RaceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("TeamLockTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TransferCost")
                        .HasColumnType("int");

                    b.Property<int>("TransfersUsed")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("FantasyTeamId");

                    b.HasIndex("RaceId");

                    b.ToTable("GameweekTeams");
                });

            modelBuilder.Entity("Domain.Entities.ResultEntities.RaceResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("DidNotFinish")
                        .HasColumnType("bit");

                    b.Property<bool>("DidNotStart")
                        .HasColumnType("bit");

                    b.Property<bool>("Disqualified")
                        .HasColumnType("bit");

                    b.Property<Guid>("DriverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FantasyPoints")
                        .HasColumnType("int");

                    b.Property<bool>("FastestLap")
                        .HasColumnType("bit");

                    b.Property<int?>("GridPosition")
                        .HasColumnType("int");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.Property<bool>("PolePosition")
                        .HasColumnType("bit");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<Guid>("RaceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<TimeSpan?>("Time")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("RaceId");

                    b.ToTable("RaceResults");
                });

            modelBuilder.Entity("Domain.Entities.CoreEntities.FantasyTeam", b =>
                {
                    b.HasOne("Domain.Entities.CoreEntities.Season", "Season")
                        .WithMany("FantasyTeams")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.CoreEntities.User", "User")
                        .WithMany("FantasyTeams")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.CoreEntities.League", b =>
                {
                    b.HasOne("Domain.Entities.CoreEntities.User", "Owner")
                        .WithMany("OwnedLeagues")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.CoreEntities.Season", "Season")
                        .WithMany()
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("Domain.Entities.CoreEntities.Race", b =>
                {
                    b.HasOne("Domain.Entities.CoreEntities.Season", "Season")
                        .WithMany("Races")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");
                });

            modelBuilder.Entity("Domain.Entities.RelationshipEntities.SeasonConstructor", b =>
                {
                    b.HasOne("Domain.Entities.CoreEntities.Constructor", "Constructor")
                        .WithMany("SeasonConstructors")
                        .HasForeignKey("ConstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.CoreEntities.Season", "Season")
                        .WithMany("SeasonConstructors")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Constructor");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("Domain.Entities.RelationshipEntities.SeasonDriver", b =>
                {
                    b.HasOne("Domain.Entities.CoreEntities.Constructor", "Constructor")
                        .WithMany()
                        .HasForeignKey("ConstructorId");

                    b.HasOne("Domain.Entities.CoreEntities.Driver", "Driver")
                        .WithMany("SeasonDrivers")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.CoreEntities.Season", "Season")
                        .WithMany("SeasonDrivers")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Constructor");

                    b.Navigation("Driver");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("Domain.Entities.RelationshipEntities.TeamConstructor", b =>
                {
                    b.HasOne("Domain.Entities.CoreEntities.Constructor", "Constructor")
                        .WithMany("TeamConstructors")
                        .HasForeignKey("ConstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.CoreEntities.FantasyTeam", "FantasyTeam")
                        .WithMany("TeamConstructors")
                        .HasForeignKey("FantasyTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Constructor");

                    b.Navigation("FantasyTeam");
                });

            modelBuilder.Entity("Domain.Entities.RelationshipEntities.TeamDriver", b =>
                {
                    b.HasOne("Domain.Entities.CoreEntities.Driver", "Driver")
                        .WithMany("TeamDrivers")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.CoreEntities.FantasyTeam", "FantasyTeam")
                        .WithMany("TeamDrivers")
                        .HasForeignKey("FantasyTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("FantasyTeam");
                });

            modelBuilder.Entity("Domain.Entities.RelationshipEntities.UserLeague", b =>
                {
                    b.HasOne("Domain.Entities.CoreEntities.League", "League")
                        .WithMany("UserLeagues")
                        .HasForeignKey("LeagueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.CoreEntities.User", "User")
                        .WithMany("UserLeagues")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("League");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.ResultEntities.ConstructorResult", b =>
                {
                    b.HasOne("Domain.Entities.CoreEntities.Constructor", "Constructor")
                        .WithMany("ConstructorResults")
                        .HasForeignKey("ConstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.CoreEntities.Race", "Race")
                        .WithMany("ConstructorResults")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Constructor");

                    b.Navigation("Race");
                });

            modelBuilder.Entity("Domain.Entities.ResultEntities.GameweekConstructor", b =>
                {
                    b.HasOne("Domain.Entities.CoreEntities.Constructor", "Constructor")
                        .WithMany()
                        .HasForeignKey("ConstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ResultEntities.GameweekTeam", "GameweekTeam")
                        .WithMany("GameweekConstructors")
                        .HasForeignKey("GameweekTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Constructor");

                    b.Navigation("GameweekTeam");
                });

            modelBuilder.Entity("Domain.Entities.ResultEntities.GameweekDriver", b =>
                {
                    b.HasOne("Domain.Entities.CoreEntities.Driver", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.ResultEntities.GameweekTeam", "GameweekTeam")
                        .WithMany("GameweekDrivers")
                        .HasForeignKey("GameweekTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("GameweekTeam");
                });

            modelBuilder.Entity("Domain.Entities.ResultEntities.GameweekTeam", b =>
                {
                    b.HasOne("Domain.Entities.CoreEntities.FantasyTeam", "FantasyTeam")
                        .WithMany("GameweekTeams")
                        .HasForeignKey("FantasyTeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.CoreEntities.Race", "Race")
                        .WithMany("GameweekTeams")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("FantasyTeam");

                    b.Navigation("Race");
                });

            modelBuilder.Entity("Domain.Entities.ResultEntities.RaceResult", b =>
                {
                    b.HasOne("Domain.Entities.CoreEntities.Driver", "Driver")
                        .WithMany("RaceResults")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.CoreEntities.Race", "Race")
                        .WithMany("RaceResults")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");

                    b.Navigation("Race");
                });

            modelBuilder.Entity("Domain.Entities.CoreEntities.Constructor", b =>
                {
                    b.Navigation("ConstructorResults");

                    b.Navigation("SeasonConstructors");

                    b.Navigation("TeamConstructors");
                });

            modelBuilder.Entity("Domain.Entities.CoreEntities.Driver", b =>
                {
                    b.Navigation("RaceResults");

                    b.Navigation("SeasonDrivers");

                    b.Navigation("TeamDrivers");
                });

            modelBuilder.Entity("Domain.Entities.CoreEntities.FantasyTeam", b =>
                {
                    b.Navigation("GameweekTeams");

                    b.Navigation("TeamConstructors");

                    b.Navigation("TeamDrivers");
                });

            modelBuilder.Entity("Domain.Entities.CoreEntities.League", b =>
                {
                    b.Navigation("UserLeagues");
                });

            modelBuilder.Entity("Domain.Entities.CoreEntities.Race", b =>
                {
                    b.Navigation("ConstructorResults");

                    b.Navigation("GameweekTeams");

                    b.Navigation("RaceResults");
                });

            modelBuilder.Entity("Domain.Entities.CoreEntities.Season", b =>
                {
                    b.Navigation("FantasyTeams");

                    b.Navigation("Races");

                    b.Navigation("SeasonConstructors");

                    b.Navigation("SeasonDrivers");
                });

            modelBuilder.Entity("Domain.Entities.CoreEntities.User", b =>
                {
                    b.Navigation("FantasyTeams");

                    b.Navigation("OwnedLeagues");

                    b.Navigation("UserLeagues");
                });

            modelBuilder.Entity("Domain.Entities.ResultEntities.GameweekTeam", b =>
                {
                    b.Navigation("GameweekConstructors");

                    b.Navigation("GameweekDrivers");
                });
#pragma warning restore 612, 618
        }
    }
}
